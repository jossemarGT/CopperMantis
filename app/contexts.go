// Code generated by goagen v1.1.0, command line:
// $ goa_gen
//
// API "CopperMantis": Application Contexts
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
	"net/http"
	"strconv"
)

// CreateContestContext provides the contest create action context.
type CreateContestContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *ContestPayload
}

// NewCreateContestContext parses the incoming request URL and body, performs validations and creates the
// context used by the contest controller create action.
func NewCreateContestContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateContestContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateContestContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateContestContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateContestContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateContestContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteContestContext provides the contest delete action context.
type DeleteContestContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ContestID int
}

// NewDeleteContestContext parses the incoming request URL and body, performs validations and creates the
// context used by the contest controller delete action.
func NewDeleteContestContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteContestContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteContestContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContestID := req.Params["contestID"]
	if len(paramContestID) > 0 {
		rawContestID := paramContestID[0]
		if contestID, err2 := strconv.Atoi(rawContestID); err2 == nil {
			rctx.ContestID = contestID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("contestID", rawContestID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteContestContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteContestContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteContestContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteContestContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListContestContext provides the contest list action context.
type ListContestContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Page int
	Sort string
}

// NewListContestContext parses the incoming request URL and body, performs validations and creates the
// context used by the contest controller list action.
func NewListContestContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListContestContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListContestContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPage := req.Params["page"]
	if len(paramPage) == 0 {
		rctx.Page = 1
	} else {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			rctx.Page = page
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
	}
	paramSort := req.Params["sort"]
	if len(paramSort) == 0 {
		rctx.Sort = "desc"
	} else {
		rawSort := paramSort[0]
		rctx.Sort = rawSort
		if !(rctx.Sort == "asc" || rctx.Sort == "desc") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`sort`, rctx.Sort, []interface{}{"asc", "desc"}))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListContestContext) OK(r CmsContestCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cms.contest+json; type=collection")
	if r == nil {
		r = CmsContestCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ListContestContext) OKFull(r CmsContestFullCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cms.contest+json; type=collection")
	if r == nil {
		r = CmsContestFullCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ListContestContext) OKTiny(r CmsContestTinyCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cms.contest+json; type=collection")
	if r == nil {
		r = CmsContestTinyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListContestContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListContestContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowContestContext provides the contest show action context.
type ShowContestContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ContestID int
}

// NewShowContestContext parses the incoming request URL and body, performs validations and creates the
// context used by the contest controller show action.
func NewShowContestContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowContestContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowContestContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContestID := req.Params["contestID"]
	if len(paramContestID) > 0 {
		rawContestID := paramContestID[0]
		if contestID, err2 := strconv.Atoi(rawContestID); err2 == nil {
			rctx.ContestID = contestID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("contestID", rawContestID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowContestContext) OK(r *CmsContest) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cms.contest+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ShowContestContext) OKFull(r *CmsContestFull) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cms.contest+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ShowContestContext) OKTiny(r *CmsContestTiny) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cms.contest+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowContestContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowContestContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowContestContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateContestContext provides the contest update action context.
type UpdateContestContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ContestID int
	Payload   *ContestPayload
}

// NewUpdateContestContext parses the incoming request URL and body, performs validations and creates the
// context used by the contest controller update action.
func NewUpdateContestContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateContestContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateContestContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContestID := req.Params["contestID"]
	if len(paramContestID) > 0 {
		rawContestID := paramContestID[0]
		if contestID, err2 := strconv.Atoi(rawContestID); err2 == nil {
			rctx.ContestID = contestID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("contestID", rawContestID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateContestContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateContestContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateContestContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateContestContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreateDocumentContext provides the document create action context.
type CreateDocumentContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *DocumentPayload
}

// NewCreateDocumentContext parses the incoming request URL and body, performs validations and creates the
// context used by the document controller create action.
func NewCreateDocumentContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateDocumentContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateDocumentContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateDocumentContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateDocumentContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteDocumentContext provides the document delete action context.
type DeleteDocumentContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	DocumentID int
}

// NewDeleteDocumentContext parses the incoming request URL and body, performs validations and creates the
// context used by the document controller delete action.
func NewDeleteDocumentContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteDocumentContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteDocumentContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDocumentID := req.Params["documentID"]
	if len(paramDocumentID) > 0 {
		rawDocumentID := paramDocumentID[0]
		if documentID, err2 := strconv.Atoi(rawDocumentID); err2 == nil {
			rctx.DocumentID = documentID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("documentID", rawDocumentID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteDocumentContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteDocumentContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteDocumentContext) NotFound(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// ListDocumentContext provides the document list action context.
type ListDocumentContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Kind string
	Page int
	Sort string
}

// NewListDocumentContext parses the incoming request URL and body, performs validations and creates the
// context used by the document controller list action.
func NewListDocumentContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListDocumentContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListDocumentContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramKind := req.Params["kind"]
	if len(paramKind) == 0 {
		rctx.Kind = "any"
	} else {
		rawKind := paramKind[0]
		rctx.Kind = rawKind
		if !(rctx.Kind == "page" || rctx.Kind == "problem" || rctx.Kind == "any") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`kind`, rctx.Kind, []interface{}{"page", "problem", "any"}))
		}
	}
	paramPage := req.Params["page"]
	if len(paramPage) == 0 {
		rctx.Page = 1
	} else {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			rctx.Page = page
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
	}
	paramSort := req.Params["sort"]
	if len(paramSort) == 0 {
		rctx.Sort = "desc"
	} else {
		rawSort := paramSort[0]
		rctx.Sort = rawSort
		if !(rctx.Sort == "asc" || rctx.Sort == "desc") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`sort`, rctx.Sort, []interface{}{"asc", "desc"}))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListDocumentContext) OK(r CmsDocumentCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cms.document+json; type=collection")
	if r == nil {
		r = CmsDocumentCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ListDocumentContext) OKFull(r CmsDocumentFullCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cms.document+json; type=collection")
	if r == nil {
		r = CmsDocumentFullCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ListDocumentContext) OKTiny(r CmsDocumentTinyCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cms.document+json; type=collection")
	if r == nil {
		r = CmsDocumentTinyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListDocumentContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListDocumentContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowDocumentContext provides the document show action context.
type ShowDocumentContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	DocumentID int
}

// NewShowDocumentContext parses the incoming request URL and body, performs validations and creates the
// context used by the document controller show action.
func NewShowDocumentContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowDocumentContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowDocumentContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDocumentID := req.Params["documentID"]
	if len(paramDocumentID) > 0 {
		rawDocumentID := paramDocumentID[0]
		if documentID, err2 := strconv.Atoi(rawDocumentID); err2 == nil {
			rctx.DocumentID = documentID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("documentID", rawDocumentID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowDocumentContext) OK(r *CmsDocument) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cms.document+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ShowDocumentContext) OKFull(r *CmsDocumentFull) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cms.document+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ShowDocumentContext) OKTiny(r *CmsDocumentTiny) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cms.document+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowDocumentContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowDocumentContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateDocumentContext provides the document update action context.
type UpdateDocumentContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	DocumentID int
	Payload    *DocumentPayload
}

// NewUpdateDocumentContext parses the incoming request URL and body, performs validations and creates the
// context used by the document controller update action.
func NewUpdateDocumentContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateDocumentContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateDocumentContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDocumentID := req.Params["documentID"]
	if len(paramDocumentID) > 0 {
		rawDocumentID := paramDocumentID[0]
		if documentID, err2 := strconv.Atoi(rawDocumentID); err2 == nil {
			rctx.DocumentID = documentID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("documentID", rawDocumentID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateDocumentContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateDocumentContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateDocumentContext) NotFound(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// PingMonitoringContext provides the monitoring ping action context.
type PingMonitoringContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewPingMonitoringContext parses the incoming request URL and body, performs validations and creates the
// context used by the monitoring controller ping action.
func NewPingMonitoringContext(ctx context.Context, r *http.Request, service *goa.Service) (*PingMonitoringContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PingMonitoringContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *PingMonitoringContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// CreateProfileContext provides the profile create action context.
type CreateProfileContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *ProfilePayload
}

// NewCreateProfileContext parses the incoming request URL and body, performs validations and creates the
// context used by the profile controller create action.
func NewCreateProfileContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateProfileContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateProfileContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateProfileContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateProfileContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteProfileContext provides the profile delete action context.
type DeleteProfileContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProfileID int
}

// NewDeleteProfileContext parses the incoming request URL and body, performs validations and creates the
// context used by the profile controller delete action.
func NewDeleteProfileContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteProfileContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteProfileContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProfileID := req.Params["profileID"]
	if len(paramProfileID) > 0 {
		rawProfileID := paramProfileID[0]
		if profileID, err2 := strconv.Atoi(rawProfileID); err2 == nil {
			rctx.ProfileID = profileID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("profileID", rawProfileID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteProfileContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteProfileContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteProfileContext) NotFound(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// ListProfileContext provides the profile list action context.
type ListProfileContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Page int
	Sort string
}

// NewListProfileContext parses the incoming request URL and body, performs validations and creates the
// context used by the profile controller list action.
func NewListProfileContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListProfileContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListProfileContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPage := req.Params["page"]
	if len(paramPage) == 0 {
		rctx.Page = 1
	} else {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			rctx.Page = page
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
	}
	paramSort := req.Params["sort"]
	if len(paramSort) == 0 {
		rctx.Sort = "desc"
	} else {
		rawSort := paramSort[0]
		rctx.Sort = rawSort
		if !(rctx.Sort == "asc" || rctx.Sort == "desc") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`sort`, rctx.Sort, []interface{}{"asc", "desc"}))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListProfileContext) OK(r CmsProfileCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cms.profile+json; type=collection")
	if r == nil {
		r = CmsProfileCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ListProfileContext) OKFull(r CmsProfileFullCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cms.profile+json; type=collection")
	if r == nil {
		r = CmsProfileFullCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ListProfileContext) OKTiny(r CmsProfileTinyCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cms.profile+json; type=collection")
	if r == nil {
		r = CmsProfileTinyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListProfileContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListProfileContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowProfileContext provides the profile show action context.
type ShowProfileContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProfileID int
}

// NewShowProfileContext parses the incoming request URL and body, performs validations and creates the
// context used by the profile controller show action.
func NewShowProfileContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowProfileContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowProfileContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProfileID := req.Params["profileID"]
	if len(paramProfileID) > 0 {
		rawProfileID := paramProfileID[0]
		if profileID, err2 := strconv.Atoi(rawProfileID); err2 == nil {
			rctx.ProfileID = profileID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("profileID", rawProfileID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowProfileContext) OK(r *CmsProfile) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cms.profile+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ShowProfileContext) OKFull(r *CmsProfileFull) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cms.profile+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ShowProfileContext) OKTiny(r *CmsProfileTiny) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.cms.profile+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowProfileContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowProfileContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateProfileContext provides the profile update action context.
type UpdateProfileContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProfileID int
	Payload   *ProfilePayload
}

// NewUpdateProfileContext parses the incoming request URL and body, performs validations and creates the
// context used by the profile controller update action.
func NewUpdateProfileContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateProfileContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateProfileContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProfileID := req.Params["profileID"]
	if len(paramProfileID) > 0 {
		rawProfileID := paramProfileID[0]
		if profileID, err2 := strconv.Atoi(rawProfileID); err2 == nil {
			rctx.ProfileID = profileID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("profileID", rawProfileID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateProfileContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateProfileContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateProfileContext) NotFound(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}
