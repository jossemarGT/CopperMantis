// Code generated by goagen v1.1.0, command line:
// $ goa_gen
//
// API "CopperMantis": Application Media Types
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"github.com/goadesign/goa"
	"net/http"
	"time"
	"unicode/utf8"
)

// Contest representation (default view)
//
// Identifier: application/vnd.cms.contest+json; view=default
type CmsContest struct {
	// Contest href
	Href string `form:"href" json:"href" xml:"href"`
	// Contest ID
	ID int `form:"id" json:"id" xml:"id"`
	// Contest status
	Status string `form:"status" json:"status" xml:"status"`
	// Contest title
	Title string `form:"title" json:"title" xml:"title"`
}

// Validate validates the CmsContest media type instance.
func (mt *CmsContest) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.Title == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "title"))
	}
	if mt.Status == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "status"))
	}
	if utf8.RuneCountInString(mt.Status) < 3 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.status`, mt.Status, utf8.RuneCountInString(mt.Status), 3, true))
	}
	if utf8.RuneCountInString(mt.Status) > 15 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.status`, mt.Status, utf8.RuneCountInString(mt.Status), 15, false))
	}
	if utf8.RuneCountInString(mt.Title) < 3 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.title`, mt.Title, utf8.RuneCountInString(mt.Title), 3, true))
	}
	if utf8.RuneCountInString(mt.Title) > 140 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.title`, mt.Title, utf8.RuneCountInString(mt.Title), 140, false))
	}
	return
}

// Contest representation (full view)
//
// Identifier: application/vnd.cms.contest+json; view=full
type CmsContestFull struct {
	FinishTime time.Time `form:"finish_time" json:"finish_time" xml:"finish_time"`
	// Contest href
	Href string `form:"href" json:"href" xml:"href"`
	// Contest ID
	ID        int       `form:"id" json:"id" xml:"id"`
	StartTime time.Time `form:"start_time" json:"start_time" xml:"start_time"`
	// Contest status
	Status string `form:"status" json:"status" xml:"status"`
	// Contest title
	Title string `form:"title" json:"title" xml:"title"`
}

// Validate validates the CmsContestFull media type instance.
func (mt *CmsContestFull) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.Title == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "title"))
	}
	if mt.Status == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "status"))
	}

	if utf8.RuneCountInString(mt.Status) < 3 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.status`, mt.Status, utf8.RuneCountInString(mt.Status), 3, true))
	}
	if utf8.RuneCountInString(mt.Status) > 15 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.status`, mt.Status, utf8.RuneCountInString(mt.Status), 15, false))
	}
	if utf8.RuneCountInString(mt.Title) < 3 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.title`, mt.Title, utf8.RuneCountInString(mt.Title), 3, true))
	}
	if utf8.RuneCountInString(mt.Title) > 140 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.title`, mt.Title, utf8.RuneCountInString(mt.Title), 140, false))
	}
	return
}

// Contest representation (tiny view)
//
// Identifier: application/vnd.cms.contest+json; view=tiny
type CmsContestTiny struct {
	// Contest href
	Href string `form:"href" json:"href" xml:"href"`
	// Contest ID
	ID int `form:"id" json:"id" xml:"id"`
	// Contest title
	Title string `form:"title" json:"title" xml:"title"`
}

// Validate validates the CmsContestTiny media type instance.
func (mt *CmsContestTiny) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.Title == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "title"))
	}
	if utf8.RuneCountInString(mt.Title) < 3 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.title`, mt.Title, utf8.RuneCountInString(mt.Title), 3, true))
	}
	if utf8.RuneCountInString(mt.Title) > 140 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.title`, mt.Title, utf8.RuneCountInString(mt.Title), 140, false))
	}
	return
}

// DecodeCmsContest decodes the CmsContest instance encoded in resp body.
func (c *Client) DecodeCmsContest(resp *http.Response) (*CmsContest, error) {
	var decoded CmsContest
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeCmsContestFull decodes the CmsContestFull instance encoded in resp body.
func (c *Client) DecodeCmsContestFull(resp *http.Response) (*CmsContestFull, error) {
	var decoded CmsContestFull
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeCmsContestTiny decodes the CmsContestTiny instance encoded in resp body.
func (c *Client) DecodeCmsContestTiny(resp *http.Response) (*CmsContestTiny, error) {
	var decoded CmsContestTiny
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// CmsContestCollection is the media type for an array of CmsContest (default view)
//
// Identifier: application/vnd.cms.contest+json; type=collection; view=default
type CmsContestCollection []*CmsContest

// Validate validates the CmsContestCollection media type instance.
func (mt CmsContestCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// CmsContestCollection is the media type for an array of CmsContest (full view)
//
// Identifier: application/vnd.cms.contest+json; type=collection; view=full
type CmsContestFullCollection []*CmsContestFull

// Validate validates the CmsContestFullCollection media type instance.
func (mt CmsContestFullCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// CmsContestCollection is the media type for an array of CmsContest (tiny view)
//
// Identifier: application/vnd.cms.contest+json; type=collection; view=tiny
type CmsContestTinyCollection []*CmsContestTiny

// Validate validates the CmsContestTinyCollection media type instance.
func (mt CmsContestTinyCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeCmsContestCollection decodes the CmsContestCollection instance encoded in resp body.
func (c *Client) DecodeCmsContestCollection(resp *http.Response) (CmsContestCollection, error) {
	var decoded CmsContestCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeCmsContestFullCollection decodes the CmsContestFullCollection instance encoded in resp body.
func (c *Client) DecodeCmsContestFullCollection(resp *http.Response) (CmsContestFullCollection, error) {
	var decoded CmsContestFullCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeCmsContestTinyCollection decodes the CmsContestTinyCollection instance encoded in resp body.
func (c *Client) DecodeCmsContestTinyCollection(resp *http.Response) (CmsContestTinyCollection, error) {
	var decoded CmsContestTinyCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Document representation (default view)
//
// Identifier: application/vnd.cms.document+json; view=default
type CmsDocument struct {
	// Brief description of the document
	Excerpt *string `form:"excerpt,omitempty" json:"excerpt,omitempty" xml:"excerpt,omitempty"`
	// Document href
	Href string `form:"href" json:"href" xml:"href"`
	// Document ID
	ID int `form:"id" json:"id" xml:"id"`
	// Document title
	Title string `form:"title" json:"title" xml:"title"`
}

// Validate validates the CmsDocument media type instance.
func (mt *CmsDocument) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.Title == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "title"))
	}
	if mt.Excerpt != nil {
		if utf8.RuneCountInString(*mt.Excerpt) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.excerpt`, *mt.Excerpt, utf8.RuneCountInString(*mt.Excerpt), 5, true))
		}
	}
	if mt.Excerpt != nil {
		if utf8.RuneCountInString(*mt.Excerpt) > 140 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.excerpt`, *mt.Excerpt, utf8.RuneCountInString(*mt.Excerpt), 140, false))
		}
	}
	if utf8.RuneCountInString(mt.Title) < 5 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.title`, mt.Title, utf8.RuneCountInString(mt.Title), 5, true))
	}
	if utf8.RuneCountInString(mt.Title) > 140 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.title`, mt.Title, utf8.RuneCountInString(mt.Title), 140, false))
	}
	return
}

// Document representation (full view)
//
// Identifier: application/vnd.cms.document+json; view=full
type CmsDocumentFull struct {
	// Document content in markdown notation
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	// Brief description of the document
	Excerpt *string `form:"excerpt,omitempty" json:"excerpt,omitempty" xml:"excerpt,omitempty"`
	// Document href
	Href string `form:"href" json:"href" xml:"href"`
	// Document ID
	ID int `form:"id" json:"id" xml:"id"`
	// Document status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Document title
	Title string `form:"title" json:"title" xml:"title"`
}

// Validate validates the CmsDocumentFull media type instance.
func (mt *CmsDocumentFull) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.Title == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "title"))
	}
	if mt.Content != nil {
		if utf8.RuneCountInString(*mt.Content) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.content`, *mt.Content, utf8.RuneCountInString(*mt.Content), 5, true))
		}
	}
	if mt.Content != nil {
		if utf8.RuneCountInString(*mt.Content) > 2048 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.content`, *mt.Content, utf8.RuneCountInString(*mt.Content), 2048, false))
		}
	}
	if mt.Excerpt != nil {
		if utf8.RuneCountInString(*mt.Excerpt) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.excerpt`, *mt.Excerpt, utf8.RuneCountInString(*mt.Excerpt), 5, true))
		}
	}
	if mt.Excerpt != nil {
		if utf8.RuneCountInString(*mt.Excerpt) > 140 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.excerpt`, *mt.Excerpt, utf8.RuneCountInString(*mt.Excerpt), 140, false))
		}
	}
	if mt.Status != nil {
		if utf8.RuneCountInString(*mt.Status) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.status`, *mt.Status, utf8.RuneCountInString(*mt.Status), 3, true))
		}
	}
	if mt.Status != nil {
		if utf8.RuneCountInString(*mt.Status) > 15 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.status`, *mt.Status, utf8.RuneCountInString(*mt.Status), 15, false))
		}
	}
	if utf8.RuneCountInString(mt.Title) < 5 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.title`, mt.Title, utf8.RuneCountInString(mt.Title), 5, true))
	}
	if utf8.RuneCountInString(mt.Title) > 140 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.title`, mt.Title, utf8.RuneCountInString(mt.Title), 140, false))
	}
	return
}

// Document representation (tiny view)
//
// Identifier: application/vnd.cms.document+json; view=tiny
type CmsDocumentTiny struct {
	// Document href
	Href string `form:"href" json:"href" xml:"href"`
	// Document ID
	ID int `form:"id" json:"id" xml:"id"`
	// Document title
	Title string `form:"title" json:"title" xml:"title"`
}

// Validate validates the CmsDocumentTiny media type instance.
func (mt *CmsDocumentTiny) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.Title == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "title"))
	}
	if utf8.RuneCountInString(mt.Title) < 5 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.title`, mt.Title, utf8.RuneCountInString(mt.Title), 5, true))
	}
	if utf8.RuneCountInString(mt.Title) > 140 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.title`, mt.Title, utf8.RuneCountInString(mt.Title), 140, false))
	}
	return
}

// DecodeCmsDocument decodes the CmsDocument instance encoded in resp body.
func (c *Client) DecodeCmsDocument(resp *http.Response) (*CmsDocument, error) {
	var decoded CmsDocument
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeCmsDocumentFull decodes the CmsDocumentFull instance encoded in resp body.
func (c *Client) DecodeCmsDocumentFull(resp *http.Response) (*CmsDocumentFull, error) {
	var decoded CmsDocumentFull
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeCmsDocumentTiny decodes the CmsDocumentTiny instance encoded in resp body.
func (c *Client) DecodeCmsDocumentTiny(resp *http.Response) (*CmsDocumentTiny, error) {
	var decoded CmsDocumentTiny
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// CmsDocumentCollection is the media type for an array of CmsDocument (default view)
//
// Identifier: application/vnd.cms.document+json; type=collection; view=default
type CmsDocumentCollection []*CmsDocument

// Validate validates the CmsDocumentCollection media type instance.
func (mt CmsDocumentCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// CmsDocumentCollection is the media type for an array of CmsDocument (full view)
//
// Identifier: application/vnd.cms.document+json; type=collection; view=full
type CmsDocumentFullCollection []*CmsDocumentFull

// Validate validates the CmsDocumentFullCollection media type instance.
func (mt CmsDocumentFullCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// CmsDocumentCollection is the media type for an array of CmsDocument (tiny view)
//
// Identifier: application/vnd.cms.document+json; type=collection; view=tiny
type CmsDocumentTinyCollection []*CmsDocumentTiny

// Validate validates the CmsDocumentTinyCollection media type instance.
func (mt CmsDocumentTinyCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeCmsDocumentCollection decodes the CmsDocumentCollection instance encoded in resp body.
func (c *Client) DecodeCmsDocumentCollection(resp *http.Response) (CmsDocumentCollection, error) {
	var decoded CmsDocumentCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeCmsDocumentFullCollection decodes the CmsDocumentFullCollection instance encoded in resp body.
func (c *Client) DecodeCmsDocumentFullCollection(resp *http.Response) (CmsDocumentFullCollection, error) {
	var decoded CmsDocumentFullCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeCmsDocumentTinyCollection decodes the CmsDocumentTinyCollection instance encoded in resp body.
func (c *Client) DecodeCmsDocumentTinyCollection(resp *http.Response) (CmsDocumentTinyCollection, error) {
	var decoded CmsDocumentTinyCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// User profile representation (default view)
//
// Identifier: application/vnd.cms.profile+json; view=default
type CmsProfile struct {
	// Date of creation
	CreatedAt time.Time `form:"created_at" json:"created_at" xml:"created_at"`
	// Unique nickname
	DisplayName string `form:"display_name" json:"display_name" xml:"display_name"`
	// User profile href
	Href string `form:"href" json:"href" xml:"href"`
	// User Profile ID
	ID int `form:"id" json:"id" xml:"id"`
}

// Validate validates the CmsProfile media type instance.
func (mt *CmsProfile) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.DisplayName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "display_name"))
	}

	if utf8.RuneCountInString(mt.DisplayName) < 5 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.display_name`, mt.DisplayName, utf8.RuneCountInString(mt.DisplayName), 5, true))
	}
	if utf8.RuneCountInString(mt.DisplayName) > 15 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.display_name`, mt.DisplayName, utf8.RuneCountInString(mt.DisplayName), 15, false))
	}
	return
}

// User profile representation (full view)
//
// Identifier: application/vnd.cms.profile+json; view=full
type CmsProfileFull struct {
	// Brief user self description
	Biography *string   `form:"biography,omitempty" json:"biography,omitempty" xml:"biography,omitempty"`
	BirthDate time.Time `form:"birth_date" json:"birth_date" xml:"birth_date"`
	// Country where is registering
	Country *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	// Unique nickname
	DisplayName string `form:"display_name" json:"display_name" xml:"display_name"`
	// Full real name
	FullName string `form:"full_name" json:"full_name" xml:"full_name"`
	// User profile href
	Href string `form:"href" json:"href" xml:"href"`
	// User Profile ID
	ID int `form:"id" json:"id" xml:"id"`
}

// Validate validates the CmsProfileFull media type instance.
func (mt *CmsProfileFull) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.DisplayName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "display_name"))
	}
	if mt.FullName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "full_name"))
	}

	if mt.Biography != nil {
		if utf8.RuneCountInString(*mt.Biography) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.biography`, *mt.Biography, utf8.RuneCountInString(*mt.Biography), 3, true))
		}
	}
	if mt.Biography != nil {
		if utf8.RuneCountInString(*mt.Biography) > 350 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.biography`, *mt.Biography, utf8.RuneCountInString(*mt.Biography), 350, false))
		}
	}
	if mt.Country != nil {
		if utf8.RuneCountInString(*mt.Country) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.country`, *mt.Country, utf8.RuneCountInString(*mt.Country), 2, true))
		}
	}
	if mt.Country != nil {
		if utf8.RuneCountInString(*mt.Country) > 60 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.country`, *mt.Country, utf8.RuneCountInString(*mt.Country), 60, false))
		}
	}
	if utf8.RuneCountInString(mt.DisplayName) < 5 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.display_name`, mt.DisplayName, utf8.RuneCountInString(mt.DisplayName), 5, true))
	}
	if utf8.RuneCountInString(mt.DisplayName) > 15 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.display_name`, mt.DisplayName, utf8.RuneCountInString(mt.DisplayName), 15, false))
	}
	if utf8.RuneCountInString(mt.FullName) < 3 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.full_name`, mt.FullName, utf8.RuneCountInString(mt.FullName), 3, true))
	}
	if utf8.RuneCountInString(mt.FullName) > 60 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.full_name`, mt.FullName, utf8.RuneCountInString(mt.FullName), 60, false))
	}
	return
}

// User profile representation (tiny view)
//
// Identifier: application/vnd.cms.profile+json; view=tiny
type CmsProfileTiny struct {
	// Unique nickname
	DisplayName string `form:"display_name" json:"display_name" xml:"display_name"`
	// User profile href
	Href string `form:"href" json:"href" xml:"href"`
	// User Profile ID
	ID int `form:"id" json:"id" xml:"id"`
}

// Validate validates the CmsProfileTiny media type instance.
func (mt *CmsProfileTiny) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.DisplayName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "display_name"))
	}
	if utf8.RuneCountInString(mt.DisplayName) < 5 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.display_name`, mt.DisplayName, utf8.RuneCountInString(mt.DisplayName), 5, true))
	}
	if utf8.RuneCountInString(mt.DisplayName) > 15 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.display_name`, mt.DisplayName, utf8.RuneCountInString(mt.DisplayName), 15, false))
	}
	return
}

// DecodeCmsProfile decodes the CmsProfile instance encoded in resp body.
func (c *Client) DecodeCmsProfile(resp *http.Response) (*CmsProfile, error) {
	var decoded CmsProfile
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeCmsProfileFull decodes the CmsProfileFull instance encoded in resp body.
func (c *Client) DecodeCmsProfileFull(resp *http.Response) (*CmsProfileFull, error) {
	var decoded CmsProfileFull
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeCmsProfileTiny decodes the CmsProfileTiny instance encoded in resp body.
func (c *Client) DecodeCmsProfileTiny(resp *http.Response) (*CmsProfileTiny, error) {
	var decoded CmsProfileTiny
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// CmsProfileCollection is the media type for an array of CmsProfile (default view)
//
// Identifier: application/vnd.cms.profile+json; type=collection; view=default
type CmsProfileCollection []*CmsProfile

// Validate validates the CmsProfileCollection media type instance.
func (mt CmsProfileCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// CmsProfileCollection is the media type for an array of CmsProfile (full view)
//
// Identifier: application/vnd.cms.profile+json; type=collection; view=full
type CmsProfileFullCollection []*CmsProfileFull

// Validate validates the CmsProfileFullCollection media type instance.
func (mt CmsProfileFullCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// CmsProfileCollection is the media type for an array of CmsProfile (tiny view)
//
// Identifier: application/vnd.cms.profile+json; type=collection; view=tiny
type CmsProfileTinyCollection []*CmsProfileTiny

// Validate validates the CmsProfileTinyCollection media type instance.
func (mt CmsProfileTinyCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeCmsProfileCollection decodes the CmsProfileCollection instance encoded in resp body.
func (c *Client) DecodeCmsProfileCollection(resp *http.Response) (CmsProfileCollection, error) {
	var decoded CmsProfileCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeCmsProfileFullCollection decodes the CmsProfileFullCollection instance encoded in resp body.
func (c *Client) DecodeCmsProfileFullCollection(resp *http.Response) (CmsProfileFullCollection, error) {
	var decoded CmsProfileFullCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeCmsProfileTinyCollection decodes the CmsProfileTinyCollection instance encoded in resp body.
func (c *Client) DecodeCmsProfileTinyCollection(resp *http.Response) (CmsProfileTinyCollection, error) {
	var decoded CmsProfileTinyCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeErrorResponse decodes the ErrorResponse instance encoded in resp body.
func (c *Client) DecodeErrorResponse(resp *http.Response) (*goa.ErrorResponse, error) {
	var decoded goa.ErrorResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}
