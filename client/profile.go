// Code generated by goagen v1.1.0, command line:
// $ goa_gen
//
// API "CopperMantis": profile Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"bytes"
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
	"strconv"
)

// CreateProfilePath computes a request path to the create action of profile.
func CreateProfilePath() string {

	return fmt.Sprintf("/cms/v1/profile")
}

// Create new user profile
func (c *Client) CreateProfile(ctx context.Context, path string, payload *ProfilePayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateProfileRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateProfileRequest create the request corresponding to the create action endpoint of the profile resource.
func (c *Client) NewCreateProfileRequest(ctx context.Context, path string, payload *ProfilePayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType != "*/*" {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteProfilePath computes a request path to the delete action of profile.
func DeleteProfilePath(profileID int) string {
	param0 := strconv.Itoa(profileID)

	return fmt.Sprintf("/cms/v1/profile/%s", param0)
}

// Soft delete profile data
func (c *Client) DeleteProfile(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteProfileRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteProfileRequest create the request corresponding to the delete action endpoint of the profile resource.
func (c *Client) NewDeleteProfileRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListProfilePath computes a request path to the list action of profile.
func ListProfilePath() string {

	return fmt.Sprintf("/cms/v1/profile")
}

// List user profiles with public data
func (c *Client) ListProfile(ctx context.Context, path string, page *int, sort *string) (*http.Response, error) {
	req, err := c.NewListProfileRequest(ctx, path, page, sort)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListProfileRequest create the request corresponding to the list action endpoint of the profile resource.
func (c *Client) NewListProfileRequest(ctx context.Context, path string, page *int, sort *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if page != nil {
		tmp31 := strconv.Itoa(*page)
		values.Set("page", tmp31)
	}
	if sort != nil {
		values.Set("sort", *sort)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowProfilePath computes a request path to the show action of profile.
func ShowProfilePath(profileID int) string {
	param0 := strconv.Itoa(profileID)

	return fmt.Sprintf("/cms/v1/profile/%s", param0)
}

// Get specific profile with public data
func (c *Client) ShowProfile(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowProfileRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowProfileRequest create the request corresponding to the show action endpoint of the profile resource.
func (c *Client) NewShowProfileRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateProfilePath computes a request path to the update action of profile.
func UpdateProfilePath(profileID int) string {
	param0 := strconv.Itoa(profileID)

	return fmt.Sprintf("/cms/v1/profile/%s", param0)
}

// UpdateProfilePath2 computes a request path to the update action of profile.
func UpdateProfilePath2(profileID int) string {
	param0 := strconv.Itoa(profileID)

	return fmt.Sprintf("/cms/v1/profile/%s", param0)
}

// Overwrite profile data
func (c *Client) UpdateProfile(ctx context.Context, path string, payload *ProfilePayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateProfileRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateProfileRequest create the request corresponding to the update action endpoint of the profile resource.
func (c *Client) NewUpdateProfileRequest(ctx context.Context, path string, payload *ProfilePayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType != "*/*" {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}
