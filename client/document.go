// Code generated by goagen v1.1.0, command line:
// $ goa_gen
//
// API "CopperMantis": document Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"bytes"
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
	"strconv"
)

// CreateDocumentPath computes a request path to the create action of document.
func CreateDocumentPath() string {

	return fmt.Sprintf("/cms/v1/document")
}

// Create new document
func (c *Client) CreateDocument(ctx context.Context, path string, payload *DocumentPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateDocumentRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateDocumentRequest create the request corresponding to the create action endpoint of the document resource.
func (c *Client) NewCreateDocumentRequest(ctx context.Context, path string, payload *DocumentPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType != "*/*" {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteDocumentPath computes a request path to the delete action of document.
func DeleteDocumentPath(documentID int) string {
	param0 := strconv.Itoa(documentID)

	return fmt.Sprintf("/cms/v1/document/%s", param0)
}

// Soft delete document data
func (c *Client) DeleteDocument(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteDocumentRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteDocumentRequest create the request corresponding to the delete action endpoint of the document resource.
func (c *Client) NewDeleteDocumentRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListDocumentPath computes a request path to the list action of document.
func ListDocumentPath() string {

	return fmt.Sprintf("/cms/v1/document")
}

// List documents with public data
func (c *Client) ListDocument(ctx context.Context, path string, kind *string, page *int, sort *string) (*http.Response, error) {
	req, err := c.NewListDocumentRequest(ctx, path, kind, page, sort)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListDocumentRequest create the request corresponding to the list action endpoint of the document resource.
func (c *Client) NewListDocumentRequest(ctx context.Context, path string, kind *string, page *int, sort *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if kind != nil {
		values.Set("kind", *kind)
	}
	if page != nil {
		tmp30 := strconv.Itoa(*page)
		values.Set("page", tmp30)
	}
	if sort != nil {
		values.Set("sort", *sort)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowDocumentPath computes a request path to the show action of document.
func ShowDocumentPath(documentID int) string {
	param0 := strconv.Itoa(documentID)

	return fmt.Sprintf("/cms/v1/document/%s", param0)
}

// Get specific document with public data
func (c *Client) ShowDocument(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowDocumentRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowDocumentRequest create the request corresponding to the show action endpoint of the document resource.
func (c *Client) NewShowDocumentRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateDocumentPath computes a request path to the update action of document.
func UpdateDocumentPath(documentID int) string {
	param0 := strconv.Itoa(documentID)

	return fmt.Sprintf("/cms/v1/document/%s", param0)
}

// UpdateDocumentPath2 computes a request path to the update action of document.
func UpdateDocumentPath2(documentID int) string {
	param0 := strconv.Itoa(documentID)

	return fmt.Sprintf("/cms/v1/document/%s", param0)
}

// Overwrite document data
func (c *Client) UpdateDocument(ctx context.Context, path string, payload *DocumentPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateDocumentRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateDocumentRequest create the request corresponding to the update action endpoint of the document resource.
func (c *Client) NewUpdateDocumentRequest(ctx context.Context, path string, payload *DocumentPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType != "*/*" {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}
