// Code generated by goagen v1.1.0, command line:
// $ goa_gen
//
// API "CopperMantis": contest Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"bytes"
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
	"strconv"
)

// CreateContestPath computes a request path to the create action of contest.
func CreateContestPath() string {

	return fmt.Sprintf("/cms/v1/contest")
}

// Create new contest
func (c *Client) CreateContest(ctx context.Context, path string, payload *ContestPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateContestRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateContestRequest create the request corresponding to the create action endpoint of the contest resource.
func (c *Client) NewCreateContestRequest(ctx context.Context, path string, payload *ContestPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType != "*/*" {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteContestPath computes a request path to the delete action of contest.
func DeleteContestPath(contestID int) string {
	param0 := strconv.Itoa(contestID)

	return fmt.Sprintf("/cms/v1/contest/%s", param0)
}

// Soft delete contest data
func (c *Client) DeleteContest(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteContestRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteContestRequest create the request corresponding to the delete action endpoint of the contest resource.
func (c *Client) NewDeleteContestRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListContestPath computes a request path to the list action of contest.
func ListContestPath() string {

	return fmt.Sprintf("/cms/v1/contest")
}

// List contests with public data
func (c *Client) ListContest(ctx context.Context, path string, page *int, sort *string) (*http.Response, error) {
	req, err := c.NewListContestRequest(ctx, path, page, sort)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListContestRequest create the request corresponding to the list action endpoint of the contest resource.
func (c *Client) NewListContestRequest(ctx context.Context, path string, page *int, sort *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if page != nil {
		tmp29 := strconv.Itoa(*page)
		values.Set("page", tmp29)
	}
	if sort != nil {
		values.Set("sort", *sort)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowContestPath computes a request path to the show action of contest.
func ShowContestPath(contestID int) string {
	param0 := strconv.Itoa(contestID)

	return fmt.Sprintf("/cms/v1/contest/%s", param0)
}

// Get specific contest with public data
func (c *Client) ShowContest(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowContestRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowContestRequest create the request corresponding to the show action endpoint of the contest resource.
func (c *Client) NewShowContestRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateContestPath computes a request path to the update action of contest.
func UpdateContestPath(contestID int) string {
	param0 := strconv.Itoa(contestID)

	return fmt.Sprintf("/cms/v1/contest/%s", param0)
}

// UpdateContestPath2 computes a request path to the update action of contest.
func UpdateContestPath2(contestID int) string {
	param0 := strconv.Itoa(contestID)

	return fmt.Sprintf("/cms/v1/contest/%s", param0)
}

// Overwrite contest data
func (c *Client) UpdateContest(ctx context.Context, path string, payload *ContestPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateContestRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateContestRequest create the request corresponding to the update action endpoint of the contest resource.
func (c *Client) NewUpdateContestRequest(ctx context.Context, path string, payload *ContestPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType != "*/*" {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}
