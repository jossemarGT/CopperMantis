// Code generated by goagen v1.1.0, command line:
// $ goagen
// --design=github.com/CopperMantis/CopperMantis/design
// --out=.
// --pkg=models
// --version=v1.1.0
//
// API "CopperMantis": Model Helpers
//
// The content of this file is auto-generated, DO NOT MODIFY

package models

import (
	"github.com/CopperMantis/CopperMantis/app"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"golang.org/x/net/context"
	"time"
)

// MediaType Retrieval Functions

// ListCmsProfile returns an array of view: default.
func (m *ProfileDB) ListCmsProfile(ctx context.Context) []*app.CmsProfile {
	defer goa.MeasureSince([]string{"goa", "db", "cmsProfile", "listcmsProfile"}, time.Now())

	var native []*Profile
	var objs []*app.CmsProfile
	err := m.Db.Scopes().Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Profile", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.ProfileToCmsProfile())
	}

	return objs
}

// ProfileToCmsProfile loads a Profile and builds the default view of media type CmsProfile.
func (m *Profile) ProfileToCmsProfile() *app.CmsProfile {
	profile := &app.CmsProfile{}
	profile.CreatedAt = m.CreatedAt
	profile.DisplayName = *m.DisplayName
	profile.ID = m.ID

	return profile
}

// OneCmsProfile loads a Profile and builds the default view of media type CmsProfile.
func (m *ProfileDB) OneCmsProfile(ctx context.Context, id int) (*app.CmsProfile, error) {
	defer goa.MeasureSince([]string{"goa", "db", "cmsProfile", "onecmsProfile"}, time.Now())

	var native Profile
	err := m.Db.Scopes().Table(m.TableName()).Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Profile", "error", err.Error())
		return nil, err
	}

	view := *native.ProfileToCmsProfile()
	return &view, err
}

// MediaType Retrieval Functions

// ListCmsProfileFull returns an array of view: full.
func (m *ProfileDB) ListCmsProfileFull(ctx context.Context) []*app.CmsProfileFull {
	defer goa.MeasureSince([]string{"goa", "db", "cmsProfile", "listcmsProfilefull"}, time.Now())

	var native []*Profile
	var objs []*app.CmsProfileFull
	err := m.Db.Scopes().Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Profile", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.ProfileToCmsProfileFull())
	}

	return objs
}

// ProfileToCmsProfileFull loads a Profile and builds the full view of media type CmsProfile.
func (m *Profile) ProfileToCmsProfileFull() *app.CmsProfileFull {
	profile := &app.CmsProfileFull{}
	profile.Biography = m.Biography
	profile.BirthDate = *m.BirthDate
	profile.Country = m.Country
	profile.DisplayName = *m.DisplayName
	profile.FullName = *m.FullName
	profile.ID = m.ID

	return profile
}

// OneCmsProfileFull loads a Profile and builds the full view of media type CmsProfile.
func (m *ProfileDB) OneCmsProfileFull(ctx context.Context, id int) (*app.CmsProfileFull, error) {
	defer goa.MeasureSince([]string{"goa", "db", "cmsProfile", "onecmsProfilefull"}, time.Now())

	var native Profile
	err := m.Db.Scopes().Table(m.TableName()).Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Profile", "error", err.Error())
		return nil, err
	}

	view := *native.ProfileToCmsProfileFull()
	return &view, err
}

// MediaType Retrieval Functions

// ListCmsProfileTiny returns an array of view: tiny.
func (m *ProfileDB) ListCmsProfileTiny(ctx context.Context) []*app.CmsProfileTiny {
	defer goa.MeasureSince([]string{"goa", "db", "cmsProfile", "listcmsProfiletiny"}, time.Now())

	var native []*Profile
	var objs []*app.CmsProfileTiny
	err := m.Db.Scopes().Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Profile", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.ProfileToCmsProfileTiny())
	}

	return objs
}

// ProfileToCmsProfileTiny loads a Profile and builds the tiny view of media type CmsProfile.
func (m *Profile) ProfileToCmsProfileTiny() *app.CmsProfileTiny {
	profile := &app.CmsProfileTiny{}
	profile.DisplayName = *m.DisplayName
	profile.ID = m.ID

	return profile
}

// OneCmsProfileTiny loads a Profile and builds the tiny view of media type CmsProfile.
func (m *ProfileDB) OneCmsProfileTiny(ctx context.Context, id int) (*app.CmsProfileTiny, error) {
	defer goa.MeasureSince([]string{"goa", "db", "cmsProfile", "onecmsProfiletiny"}, time.Now())

	var native Profile
	err := m.Db.Scopes().Table(m.TableName()).Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Profile", "error", err.Error())
		return nil, err
	}

	view := *native.ProfileToCmsProfileTiny()
	return &view, err
}
