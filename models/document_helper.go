// Code generated by goagen v1.1.0, command line:
// $ goagen
// --design=github.com/CopperMantis/CopperMantis/design
// --out=.
// --pkg=models
// --version=v1.1.0
//
// API "CopperMantis": Model Helpers
//
// The content of this file is auto-generated, DO NOT MODIFY

package models

import (
	"github.com/CopperMantis/CopperMantis/app"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"golang.org/x/net/context"
	"time"
)

// MediaType Retrieval Functions

// ListCmsDocument returns an array of view: default.
func (m *DocumentDB) ListCmsDocument(ctx context.Context) []*app.CmsDocument {
	defer goa.MeasureSince([]string{"goa", "db", "cmsDocument", "listcmsDocument"}, time.Now())

	var native []*Document
	var objs []*app.CmsDocument
	err := m.Db.Scopes().Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Document", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.DocumentToCmsDocument())
	}

	return objs
}

// DocumentToCmsDocument loads a Document and builds the default view of media type CmsDocument.
func (m *Document) DocumentToCmsDocument() *app.CmsDocument {
	document := &app.CmsDocument{}
	document.Excerpt = m.Excerpt
	document.ID = m.ID
	document.Title = *m.Title

	return document
}

// OneCmsDocument loads a Document and builds the default view of media type CmsDocument.
func (m *DocumentDB) OneCmsDocument(ctx context.Context, id int) (*app.CmsDocument, error) {
	defer goa.MeasureSince([]string{"goa", "db", "cmsDocument", "onecmsDocument"}, time.Now())

	var native Document
	err := m.Db.Scopes().Table(m.TableName()).Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Document", "error", err.Error())
		return nil, err
	}

	view := *native.DocumentToCmsDocument()
	return &view, err
}

// MediaType Retrieval Functions

// ListCmsDocumentFull returns an array of view: full.
func (m *DocumentDB) ListCmsDocumentFull(ctx context.Context) []*app.CmsDocumentFull {
	defer goa.MeasureSince([]string{"goa", "db", "cmsDocument", "listcmsDocumentfull"}, time.Now())

	var native []*Document
	var objs []*app.CmsDocumentFull
	err := m.Db.Scopes().Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Document", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.DocumentToCmsDocumentFull())
	}

	return objs
}

// DocumentToCmsDocumentFull loads a Document and builds the full view of media type CmsDocument.
func (m *Document) DocumentToCmsDocumentFull() *app.CmsDocumentFull {
	document := &app.CmsDocumentFull{}
	document.Content = m.Content
	document.Excerpt = m.Excerpt
	document.ID = m.ID
	document.Status = m.Status
	document.Title = *m.Title

	return document
}

// OneCmsDocumentFull loads a Document and builds the full view of media type CmsDocument.
func (m *DocumentDB) OneCmsDocumentFull(ctx context.Context, id int) (*app.CmsDocumentFull, error) {
	defer goa.MeasureSince([]string{"goa", "db", "cmsDocument", "onecmsDocumentfull"}, time.Now())

	var native Document
	err := m.Db.Scopes().Table(m.TableName()).Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Document", "error", err.Error())
		return nil, err
	}

	view := *native.DocumentToCmsDocumentFull()
	return &view, err
}

// MediaType Retrieval Functions

// ListCmsDocumentTiny returns an array of view: tiny.
func (m *DocumentDB) ListCmsDocumentTiny(ctx context.Context) []*app.CmsDocumentTiny {
	defer goa.MeasureSince([]string{"goa", "db", "cmsDocument", "listcmsDocumenttiny"}, time.Now())

	var native []*Document
	var objs []*app.CmsDocumentTiny
	err := m.Db.Scopes().Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Document", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.DocumentToCmsDocumentTiny())
	}

	return objs
}

// DocumentToCmsDocumentTiny loads a Document and builds the tiny view of media type CmsDocument.
func (m *Document) DocumentToCmsDocumentTiny() *app.CmsDocumentTiny {
	document := &app.CmsDocumentTiny{}
	document.ID = m.ID
	document.Title = *m.Title

	return document
}

// OneCmsDocumentTiny loads a Document and builds the tiny view of media type CmsDocument.
func (m *DocumentDB) OneCmsDocumentTiny(ctx context.Context, id int) (*app.CmsDocumentTiny, error) {
	defer goa.MeasureSince([]string{"goa", "db", "cmsDocument", "onecmsDocumenttiny"}, time.Now())

	var native Document
	err := m.Db.Scopes().Table(m.TableName()).Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Document", "error", err.Error())
		return nil, err
	}

	view := *native.DocumentToCmsDocumentTiny()
	return &view, err
}
