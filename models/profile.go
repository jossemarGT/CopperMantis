// Code generated by goagen v1.1.0, command line:
// $ goagen
// --design=github.com/CopperMantis/CopperMantis/design
// --out=.
// --pkg=models
// --version=v1.1.0
//
// API "CopperMantis": Models
//
// The content of this file is auto-generated, DO NOT MODIFY

package models

import (
	"github.com/CopperMantis/CopperMantis/app"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"golang.org/x/net/context"
	"time"
)

// User Profile
type Profile struct {
	ID          int `gorm:"primary_key"` // primary key
	Biography   *string
	BirthDate   *time.Time
	Country     *string
	CreatedAt   time.Time
	DeletedAt   *time.Time
	DisplayName *string
	FullName    *string
	UpdatedAt   time.Time
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m Profile) TableName() string {

	return "profile"
}

// ProfileDB is the implementation of the storage interface for
// Profile.
type ProfileDB struct {
	Db *gorm.DB
}

// NewProfileDB creates a new storage type.
func NewProfileDB(db *gorm.DB) *ProfileDB {
	return &ProfileDB{Db: db}
}

// DB returns the underlying database.
func (m *ProfileDB) DB() interface{} {
	return m.Db
}

// ProfileStorage represents the storage interface.
type ProfileStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*Profile, error)
	Get(ctx context.Context, id int) (*Profile, error)
	Add(ctx context.Context, profile *Profile) error
	Update(ctx context.Context, profile *Profile) error
	Delete(ctx context.Context, id int) error

	ListCmsProfile(ctx context.Context) []*app.CmsProfile
	OneCmsProfile(ctx context.Context, id int) (*app.CmsProfile, error)

	ListCmsProfileFull(ctx context.Context) []*app.CmsProfileFull
	OneCmsProfileFull(ctx context.Context, id int) (*app.CmsProfileFull, error)

	ListCmsProfileTiny(ctx context.Context) []*app.CmsProfileTiny
	OneCmsProfileTiny(ctx context.Context, id int) (*app.CmsProfileTiny, error)

	UpdateFromProfilePayload(ctx context.Context, payload *app.ProfilePayload, id int) error
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *ProfileDB) TableName() string {

	return "profile"
}

// CRUD Functions

// Get returns a single Profile as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *ProfileDB) Get(ctx context.Context, id int) (*Profile, error) {
	defer goa.MeasureSince([]string{"goa", "db", "profile", "get"}, time.Now())

	var native Profile
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of Profile
func (m *ProfileDB) List(ctx context.Context) ([]*Profile, error) {
	defer goa.MeasureSince([]string{"goa", "db", "profile", "list"}, time.Now())

	var objs []*Profile
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *ProfileDB) Add(ctx context.Context, model *Profile) error {
	defer goa.MeasureSince([]string{"goa", "db", "profile", "add"}, time.Now())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding Profile", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *ProfileDB) Update(ctx context.Context, model *Profile) error {
	defer goa.MeasureSince([]string{"goa", "db", "profile", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating Profile", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *ProfileDB) Delete(ctx context.Context, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "profile", "delete"}, time.Now())

	var obj Profile

	err := m.Db.Delete(&obj, id).Error

	if err != nil {
		goa.LogError(ctx, "error deleting Profile", "error", err.Error())
		return err
	}

	return nil
}

// ProfileFromProfilePayload Converts source ProfilePayload to target Profile model
// only copying the non-nil fields from the source.
func ProfileFromProfilePayload(payload *app.ProfilePayload) *Profile {
	profile := &Profile{}
	if payload.Biography != nil {
		profile.Biography = payload.Biography
	}
	if payload.BirthDate != nil {
		profile.BirthDate = payload.BirthDate
	}
	if payload.Country != nil {
		profile.Country = payload.Country
	}
	if payload.DisplayName != nil {
		profile.DisplayName = payload.DisplayName
	}
	if payload.FullName != nil {
		profile.FullName = payload.FullName
	}

	return profile
}

// UpdateFromProfilePayload applies non-nil changes from ProfilePayload to the model and saves it
func (m *ProfileDB) UpdateFromProfilePayload(ctx context.Context, payload *app.ProfilePayload, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "profile", "updatefromprofilePayload"}, time.Now())

	var obj Profile
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&obj).Error
	if err != nil {
		goa.LogError(ctx, "error retrieving Profile", "error", err.Error())
		return err
	}
	if payload.Biography != nil {
		obj.Biography = payload.Biography
	}
	if payload.BirthDate != nil {
		obj.BirthDate = payload.BirthDate
	}
	if payload.Country != nil {
		obj.Country = payload.Country
	}
	if payload.DisplayName != nil {
		obj.DisplayName = payload.DisplayName
	}
	if payload.FullName != nil {
		obj.FullName = payload.FullName
	}

	err = m.Db.Save(&obj).Error
	return err
}
