// Code generated by goagen v1.1.0, command line:
// $ goagen
// --design=github.com/CopperMantis/CopperMantis/design
// --out=.
// --pkg=models
// --version=v1.1.0
//
// API "CopperMantis": Models
//
// The content of this file is auto-generated, DO NOT MODIFY

package models

import (
	"github.com/CopperMantis/CopperMantis/app"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"golang.org/x/net/context"
	"time"
)

// Document
type Document struct {
	ID        int `gorm:"primary_key"` // primary key
	Content   *string
	CreatedAt time.Time
	DeletedAt *time.Time
	Excerpt   *string
	Status    *string
	Title     *string
	UpdatedAt time.Time
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m Document) TableName() string {

	return "document"
}

// DocumentDB is the implementation of the storage interface for
// Document.
type DocumentDB struct {
	Db *gorm.DB
}

// NewDocumentDB creates a new storage type.
func NewDocumentDB(db *gorm.DB) *DocumentDB {
	return &DocumentDB{Db: db}
}

// DB returns the underlying database.
func (m *DocumentDB) DB() interface{} {
	return m.Db
}

// DocumentStorage represents the storage interface.
type DocumentStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*Document, error)
	Get(ctx context.Context, id int) (*Document, error)
	Add(ctx context.Context, document *Document) error
	Update(ctx context.Context, document *Document) error
	Delete(ctx context.Context, id int) error

	ListCmsDocument(ctx context.Context) []*app.CmsDocument
	OneCmsDocument(ctx context.Context, id int) (*app.CmsDocument, error)

	ListCmsDocumentFull(ctx context.Context) []*app.CmsDocumentFull
	OneCmsDocumentFull(ctx context.Context, id int) (*app.CmsDocumentFull, error)

	ListCmsDocumentTiny(ctx context.Context) []*app.CmsDocumentTiny
	OneCmsDocumentTiny(ctx context.Context, id int) (*app.CmsDocumentTiny, error)

	UpdateFromDocumentPayload(ctx context.Context, payload *app.DocumentPayload, id int) error
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *DocumentDB) TableName() string {

	return "document"
}

// CRUD Functions

// Get returns a single Document as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *DocumentDB) Get(ctx context.Context, id int) (*Document, error) {
	defer goa.MeasureSince([]string{"goa", "db", "document", "get"}, time.Now())

	var native Document
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of Document
func (m *DocumentDB) List(ctx context.Context) ([]*Document, error) {
	defer goa.MeasureSince([]string{"goa", "db", "document", "list"}, time.Now())

	var objs []*Document
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *DocumentDB) Add(ctx context.Context, model *Document) error {
	defer goa.MeasureSince([]string{"goa", "db", "document", "add"}, time.Now())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding Document", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *DocumentDB) Update(ctx context.Context, model *Document) error {
	defer goa.MeasureSince([]string{"goa", "db", "document", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating Document", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *DocumentDB) Delete(ctx context.Context, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "document", "delete"}, time.Now())

	var obj Document

	err := m.Db.Delete(&obj, id).Error

	if err != nil {
		goa.LogError(ctx, "error deleting Document", "error", err.Error())
		return err
	}

	return nil
}

// DocumentFromDocumentPayload Converts source DocumentPayload to target Document model
// only copying the non-nil fields from the source.
func DocumentFromDocumentPayload(payload *app.DocumentPayload) *Document {
	document := &Document{}
	if payload.Content != nil {
		document.Content = payload.Content
	}
	if payload.Excerpt != nil {
		document.Excerpt = payload.Excerpt
	}
	if payload.Status != nil {
		document.Status = payload.Status
	}
	if payload.Title != nil {
		document.Title = payload.Title
	}

	return document
}

// UpdateFromDocumentPayload applies non-nil changes from DocumentPayload to the model and saves it
func (m *DocumentDB) UpdateFromDocumentPayload(ctx context.Context, payload *app.DocumentPayload, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "document", "updatefromdocumentPayload"}, time.Now())

	var obj Document
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&obj).Error
	if err != nil {
		goa.LogError(ctx, "error retrieving Document", "error", err.Error())
		return err
	}
	if payload.Content != nil {
		obj.Content = payload.Content
	}
	if payload.Excerpt != nil {
		obj.Excerpt = payload.Excerpt
	}
	if payload.Status != nil {
		obj.Status = payload.Status
	}
	if payload.Title != nil {
		obj.Title = payload.Title
	}

	err = m.Db.Save(&obj).Error
	return err
}
