// Code generated by goagen v1.1.0, command line:
// $ goagen
// --design=github.com/CopperMantis/CopperMantis/design
// --out=.
// --pkg=models
// --version=v1.1.0
//
// API "CopperMantis": Models
//
// The content of this file is auto-generated, DO NOT MODIFY

package models

import (
	"github.com/CopperMantis/CopperMantis/app"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"golang.org/x/net/context"
	"time"
)

// Programming Contest
type Contest struct {
	ID         int `gorm:"primary_key"` // primary key
	CreatedAt  time.Time
	DeletedAt  *time.Time
	FinishTime *time.Time
	StartTime  *time.Time
	Status     *string
	Title      *string
	UpdatedAt  time.Time
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m Contest) TableName() string {

	return "contest"
}

// ContestDB is the implementation of the storage interface for
// Contest.
type ContestDB struct {
	Db *gorm.DB
}

// NewContestDB creates a new storage type.
func NewContestDB(db *gorm.DB) *ContestDB {
	return &ContestDB{Db: db}
}

// DB returns the underlying database.
func (m *ContestDB) DB() interface{} {
	return m.Db
}

// ContestStorage represents the storage interface.
type ContestStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*Contest, error)
	Get(ctx context.Context, id int) (*Contest, error)
	Add(ctx context.Context, contest *Contest) error
	Update(ctx context.Context, contest *Contest) error
	Delete(ctx context.Context, id int) error

	ListCmsContest(ctx context.Context) []*app.CmsContest
	OneCmsContest(ctx context.Context, id int) (*app.CmsContest, error)

	ListCmsContestFull(ctx context.Context) []*app.CmsContestFull
	OneCmsContestFull(ctx context.Context, id int) (*app.CmsContestFull, error)

	ListCmsContestTiny(ctx context.Context) []*app.CmsContestTiny
	OneCmsContestTiny(ctx context.Context, id int) (*app.CmsContestTiny, error)

	UpdateFromContestPayload(ctx context.Context, payload *app.ContestPayload, id int) error
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *ContestDB) TableName() string {

	return "contest"
}

// CRUD Functions

// Get returns a single Contest as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *ContestDB) Get(ctx context.Context, id int) (*Contest, error) {
	defer goa.MeasureSince([]string{"goa", "db", "contest", "get"}, time.Now())

	var native Contest
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of Contest
func (m *ContestDB) List(ctx context.Context) ([]*Contest, error) {
	defer goa.MeasureSince([]string{"goa", "db", "contest", "list"}, time.Now())

	var objs []*Contest
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *ContestDB) Add(ctx context.Context, model *Contest) error {
	defer goa.MeasureSince([]string{"goa", "db", "contest", "add"}, time.Now())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding Contest", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *ContestDB) Update(ctx context.Context, model *Contest) error {
	defer goa.MeasureSince([]string{"goa", "db", "contest", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating Contest", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *ContestDB) Delete(ctx context.Context, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "contest", "delete"}, time.Now())

	var obj Contest

	err := m.Db.Delete(&obj, id).Error

	if err != nil {
		goa.LogError(ctx, "error deleting Contest", "error", err.Error())
		return err
	}

	return nil
}

// ContestFromContestPayload Converts source ContestPayload to target Contest model
// only copying the non-nil fields from the source.
func ContestFromContestPayload(payload *app.ContestPayload) *Contest {
	contest := &Contest{}
	if payload.FinishTime != nil {
		contest.FinishTime = payload.FinishTime
	}
	if payload.StartTime != nil {
		contest.StartTime = payload.StartTime
	}
	if payload.Status != nil {
		contest.Status = payload.Status
	}
	if payload.Title != nil {
		contest.Title = payload.Title
	}

	return contest
}

// UpdateFromContestPayload applies non-nil changes from ContestPayload to the model and saves it
func (m *ContestDB) UpdateFromContestPayload(ctx context.Context, payload *app.ContestPayload, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "contest", "updatefromcontestPayload"}, time.Now())

	var obj Contest
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&obj).Error
	if err != nil {
		goa.LogError(ctx, "error retrieving Contest", "error", err.Error())
		return err
	}
	if payload.FinishTime != nil {
		obj.FinishTime = payload.FinishTime
	}
	if payload.StartTime != nil {
		obj.StartTime = payload.StartTime
	}
	if payload.Status != nil {
		obj.Status = payload.Status
	}
	if payload.Title != nil {
		obj.Title = payload.Title
	}

	err = m.Db.Save(&obj).Error
	return err
}
