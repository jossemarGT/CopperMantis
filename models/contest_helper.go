// Code generated by goagen v1.1.0, command line:
// $ goagen
// --design=github.com/CopperMantis/CopperMantis/design
// --out=.
// --pkg=models
// --version=v1.1.0
//
// API "CopperMantis": Model Helpers
//
// The content of this file is auto-generated, DO NOT MODIFY

package models

import (
	"github.com/CopperMantis/CopperMantis/app"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"golang.org/x/net/context"
	"time"
)

// MediaType Retrieval Functions

// ListCmsContest returns an array of view: default.
func (m *ContestDB) ListCmsContest(ctx context.Context) []*app.CmsContest {
	defer goa.MeasureSince([]string{"goa", "db", "cmsContest", "listcmsContest"}, time.Now())

	var native []*Contest
	var objs []*app.CmsContest
	err := m.Db.Scopes().Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Contest", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.ContestToCmsContest())
	}

	return objs
}

// ContestToCmsContest loads a Contest and builds the default view of media type CmsContest.
func (m *Contest) ContestToCmsContest() *app.CmsContest {
	contest := &app.CmsContest{}
	contest.ID = m.ID
	contest.Status = *m.Status
	contest.Title = *m.Title

	return contest
}

// OneCmsContest loads a Contest and builds the default view of media type CmsContest.
func (m *ContestDB) OneCmsContest(ctx context.Context, id int) (*app.CmsContest, error) {
	defer goa.MeasureSince([]string{"goa", "db", "cmsContest", "onecmsContest"}, time.Now())

	var native Contest
	err := m.Db.Scopes().Table(m.TableName()).Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Contest", "error", err.Error())
		return nil, err
	}

	view := *native.ContestToCmsContest()
	return &view, err
}

// MediaType Retrieval Functions

// ListCmsContestFull returns an array of view: full.
func (m *ContestDB) ListCmsContestFull(ctx context.Context) []*app.CmsContestFull {
	defer goa.MeasureSince([]string{"goa", "db", "cmsContest", "listcmsContestfull"}, time.Now())

	var native []*Contest
	var objs []*app.CmsContestFull
	err := m.Db.Scopes().Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Contest", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.ContestToCmsContestFull())
	}

	return objs
}

// ContestToCmsContestFull loads a Contest and builds the full view of media type CmsContest.
func (m *Contest) ContestToCmsContestFull() *app.CmsContestFull {
	contest := &app.CmsContestFull{}
	contest.FinishTime = *m.FinishTime
	contest.ID = m.ID
	contest.StartTime = *m.StartTime
	contest.Status = *m.Status
	contest.Title = *m.Title

	return contest
}

// OneCmsContestFull loads a Contest and builds the full view of media type CmsContest.
func (m *ContestDB) OneCmsContestFull(ctx context.Context, id int) (*app.CmsContestFull, error) {
	defer goa.MeasureSince([]string{"goa", "db", "cmsContest", "onecmsContestfull"}, time.Now())

	var native Contest
	err := m.Db.Scopes().Table(m.TableName()).Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Contest", "error", err.Error())
		return nil, err
	}

	view := *native.ContestToCmsContestFull()
	return &view, err
}

// MediaType Retrieval Functions

// ListCmsContestTiny returns an array of view: tiny.
func (m *ContestDB) ListCmsContestTiny(ctx context.Context) []*app.CmsContestTiny {
	defer goa.MeasureSince([]string{"goa", "db", "cmsContest", "listcmsContesttiny"}, time.Now())

	var native []*Contest
	var objs []*app.CmsContestTiny
	err := m.Db.Scopes().Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Contest", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.ContestToCmsContestTiny())
	}

	return objs
}

// ContestToCmsContestTiny loads a Contest and builds the tiny view of media type CmsContest.
func (m *Contest) ContestToCmsContestTiny() *app.CmsContestTiny {
	contest := &app.CmsContestTiny{}
	contest.ID = m.ID
	contest.Title = *m.Title

	return contest
}

// OneCmsContestTiny loads a Contest and builds the tiny view of media type CmsContest.
func (m *ContestDB) OneCmsContestTiny(ctx context.Context, id int) (*app.CmsContestTiny, error) {
	defer goa.MeasureSince([]string{"goa", "db", "cmsContest", "onecmsContesttiny"}, time.Now())

	var native Contest
	err := m.Db.Scopes().Table(m.TableName()).Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Contest", "error", err.Error())
		return nil, err
	}

	view := *native.ContestToCmsContestTiny()
	return &view, err
}
